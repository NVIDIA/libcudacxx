//===----------------------------------------------------------------------===//
//
// Part of libcu++, the C++ Standard Library for your entire system,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _CUDA_STREAM
#define _CUDA_STREAM

#include "std/cstddef"
#include "std/detail/__config"
#include "std/detail/__pragma_push"
#include "std/version"
#include "detail/__cuda_util"

#include <cuda_runtime_api.h>
#include <stdexcept>

_LIBCUDACXX_BEGIN_NAMESPACE_CUDA

/**
 * @brief A non-owning wrapper for a `cudaStream_t`.
 *
 */
class stream_view {
public:
  /**
   * @brief Constructs a `stream_view` of the "default" CUDA stream.
   *
   * For behavior of the default stream,
   * see https://docs.nvidia.com/cuda/cuda-runtime-api/stream-sync-behavior.html
   *
   */
  constexpr stream_view() = default;

  /**
   * @brief Constructs a `stream_view` from a `cudaStream_t` handle
   *
   * @note: It is the callers responsibilty to ensure the `stream_view` does not
   * outlive the stream identified by the `cudaStream_t` handle.
   *
   */
  constexpr stream_view(cudaStream_t stream) : __stream{stream} {}

  /// Disallow construction from an `int`, e.g., `0`.
  stream_view(int) = delete;

  /// Disallow construction from `nullptr`
  stream_view(std::nullptr_t) = delete;

  /// Returns the wrapped `cudaStream_t` handle
  constexpr cudaStream_t get() const noexcept { return __stream; }

  /**
   * @brief Synchronizes the wrapped stream.
   *
   * @throws cuda::cuda_error if synchronization fails.
   *
   */
  void synchronize() const {
    detail::__throw_on_cuda_error(cudaStreamSynchronize(get()), "Failed to synchronize");
  }

private:
  cudaStream_t __stream{0}; ///< Handle of the viewed stream
};

/**
 * @brief Compares two `stream_view`s for equality
 *
 * @param lhs The first `stream_view` to compare
 * @param rhs The second `stream_view` to compare
 * @return true if equal, false if unequal
 */
inline constexpr bool operator==(stream_view __lhs, stream_view __rhs) {
  return __lhs.get() == __rhs.get();
}

/**
 * @brief Compares two `stream_view`s for inequality
 *
 * @param lhs The first `stream_view` to compare
 * @param rhs The second `stream_view` to compare
 * Return true if unequal, false if equal
 */
inline constexpr bool operator!=(stream_view __lhs, stream_view __rhs) {
  return not(__lhs == __rhs);
}

_LIBCUDACXX_END_NAMESPACE_CUDA

#include "std/detail/__pragma_pop"

#endif //_CUDA_STREAM
